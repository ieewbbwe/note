1. 对称加密技术
加密，解密秘钥一样
问题：中间人攻击，可以比较容易的获取到秘钥，解析客户端请求的数据，同时伪造请求去请求服务器，并修改响应结果，双向欺骗


2. 非对称加密技术
RSA 利用公钥、私钥，加密解密，私钥不能泄露，私钥私有
解决1的问题：中间人拿到公钥加密后的请求数据，因为没有私钥无法解密，因此无法知道请求参数
问题：
1.攻击者可以拦截到用户请求，丢弃掉请求，生成新的请求给服务端，最终服务端响应的结果并不是用户希望的结果
2.攻击者可以伪装成服务器，自己生成私钥\公钥，并把公钥发给用户，用户无法察觉的话就会泄露关键数据

3. Https 证书
由国家安全机构颁发的证书，私钥受到高度保护，权威
加密请求数据，并且验证数据是从正确服务器响应
用户在接受信息的时候是用国家安全局强制下发给互联网用户的公钥去解密数据，如果在证书中找到当前域名，则说明该域名是注册过 并且安全可靠的
解决2的问题：
1.攻击者伪造的站点未在安全局注册，会被提示不安全
2.用户使用的是安全局下发的公钥，攻击者无法伪造
问题:
要给国家安全局交“保护费”
既然私钥被保护起来了，那服务端如何解密？

4. 证书锁定
自定义证书，在前端写死证书，传输数据时可以加密，服务端用对称的私钥解密，同时获取响应数据的时候，校验服务端是否持有这张证书
思路：给一个约定好的标准，来验证是否是自家服务端的数据
解决3的问题
省钱
问题：
没有国家权威的安全性高，也会被破解
后台改了，前端也要改

客户端验证数据是从服务端来的
服务端验证数据是从客户端来的
数据传输加密